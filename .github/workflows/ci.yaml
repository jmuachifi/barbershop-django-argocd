name: Deploy Django App with ArgoCD

on:
  push:
    branches:
    - main

permissions:
  contents: write

jobs:
  # 1. Code Quality Stage
  code_quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Run Flake8 and Ignore Minor Issues
      continue-on-error: true  # Ignore minor issues and continue
      run: |
        flake8 --max-line-length=88 || echo "Flake8 found issues but proceeding"

    - name: Run Black and Automatically Fix Formatting Issues
      run: |
        black .

  # 2. Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    needs: code_quality  # Ensure code quality checks run first
    if: github.event.head_commit.message != '[skip build]' # Skip build if commit message contains '[skip build]'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build --tag jmuachifi/barbershop-django-app:$GITHUB_SHA -t jmuachifi/barbershop-django-app:latest .
        docker push jmuachifi/barbershop-django-app:latest
        docker push jmuachifi/barbershop-django-app:$GITHUB_SHA

    - name: Save Image Digest to Build Output
      id: docker_meta
      run: |
        echo "image_digest=$(docker inspect --format='{{index .RepoDigests 0}}' jmuachifi/barbershop-django-app:latest)" >> $GITHUB_ENV

  # 3. Security Check Stage (after image build)
  security_check:
    runs-on: ubuntu-latest
    needs: build  # Ensure security check runs after the build
    if: github.event.head_commit.message != '[skip security]'  # Skip security if '[skip security]' is in commit message

    steps:
    - name: Install Trivy for Container Security Scanning
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.image_digest }}  # Use the built image digest for scanning

  # 4. Update kustomization.yaml and Commit Changes
  update_kustomization:
    runs-on: ubuntu-latest
    needs: [build, security_check]  # Ensure build and security check complete

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check if kustomization.yaml needs updating
      id: check_kustomization
      run: |
        old_tag=$(grep "newTag" k8s/kustomization.yaml | awk '{print $2}')
        if [[ "$old_tag" == "$GITHUB_SHA" ]]; then
          echo "Image tag already up-to-date"
          echo "::set-output name=skip::true"
        else
          echo "::set-output name=skip::false"
        fi

    - name: Update kustomization.yaml with new image tag
      if: steps.check_kustomization.outputs.skip != 'true'
      run: |
        git remote set-url origin https://jmuachifi:${{ secrets.GH_PAT }}@github.com/jmuachifi/barbershop-django-argocd.git
        sed -i "s@newTag:.*@newTag: $GITHUB_SHA@g" k8s/kustomization.yaml
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git commit -am "Update image tag to $GITHUB_SHA [skip ci]"
        git push origin main

  # 5. Deploy with ArgoCD
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: update_kustomization
  #   if: steps.update_kustomization.outputs.skip != 'true'  # Only deploy if image tag was updated

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Log in to ArgoCD
  #     run: |
  #       argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

  #   - name: Sync ArgoCD Application
  #     run: |
  #       argocd app sync django-app
